if(NOT EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
  message(STATUS "CPack is not found. SKIP")
  return()
endif()

set(CPACK_PACKAGE_CONTACT "cv-rmvl community")
set(CPACK_PACKAGE_VERSION_MAJOR "${RMVL_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${RMVL_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${RMVL_VERSION_PATCH}")
set(CPACK_PACKAGE_VERSION "${RMVL_VERSION}")
set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${PROJECT_SOURCE_DIR}/README.md")


if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  # Deb
  find_program(DPKG_EXECUTABLE dpkg)
  if(DPKG_EXECUTABLE)
    set(CPACK_GENERATOR "DEB")
  else()
    # RPM
    find_program(RPM_EXECUTABLE rpm)
    if(RPM_EXECUTABLE)
      set(CPACK_GENERATOR "RPM")
    else()
      set(CPACK_GENERATOR "TGZ")
    endif()
  endif()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  # NSIS
  find_program(NSIS_EXECUTABLE makensis)
  if(NSIS_EXECUTABLE)
    set(CPACK_GENERATOR "NSIS")
  else()
    set(CPACK_GENERATOR "ZIP")
  endif()
endif()

# deb
set(CPACK_DEBIAN_PACKAGE_DEPENDS "build-essential")

# NSIS
set(CPACK_NSIS_DISPLAY_NAME "${PROJECT_NAME}")
set(CPACK_NSIS_MUI_ICON "${PROJECT_SOURCE_DIR}/doc/favicon.ico")
set(CPACK_NSIS_MUI_UNIICON "${PROJECT_SOURCE_DIR}/doc/favicon.ico")
set(CPACK_NSIS_URL_INFO_ABOUT "${CMAKE_PROJECT_HOMEPAGE_URL}")

include(CPack)